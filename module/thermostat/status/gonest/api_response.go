/* 
 * Nest API
 *
 * The Nest API models a physical home or building as a structure, with Nest Learning Thermostats, Nest Protects, and Nest Cams as devices in the structure. This structure also contains information about the home as a whole (such as Away or ETA state, or active Rush Hours).  > **Key Point**: All devices share a common base set of information: a > user-supplied name, physical location in the home, software version, and > online status.  Every data element in the structure is addressable by a resource URL (called \"data locations\") in a shared JSON document. Each data location can store strings, numbers, booleans, parent/child objects, or arrays.  > Note: Use this root URL when making Nest API calls: ```https://developer-api.nest.com```   From the API, you can sync data from locations at multiple levels in the data model, for example:  * an entire structure, including all devices  * a single device in a structure  * a group of data values (current and ambient temperature)  * a single data value (battery health state) 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package gonest

import (
	"net/http"
)

type APIResponse struct {
	*http.Response `json:"-"`
	Message string `json:"message,omitempty"`
	// Operation is the name of the swagger operation.
	Operation       string `json:"operation,omitempty"`
	// RequestURL is the request URL. This value is always available, even if the
	// embedded *http.Response is nil.
	RequestURL      string `json:"url,omitempty"`
	// Method is the HTTP method used for the request.  This value is always
	// available, even if the embedded *http.Response is nil.
	Method          string `json:"method,omitempty"`
	// Payload holds the contents of the response body (which may be nil or empty).
	// This is provided here as the raw response.Body() reader will have already
	// been drained.
	Payload []byte `json:"-"`
}

func NewAPIResponse(r *http.Response) *APIResponse {

	response := &APIResponse{Response: r}
	return response
}

func NewAPIResponseWithError(errorMessage string) *APIResponse {

	response := &APIResponse{Message: errorMessage}
	return response
}
