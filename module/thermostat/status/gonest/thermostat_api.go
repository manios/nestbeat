/* 
 * Nest API
 *
 * The Nest API models a physical home or building as a structure, with Nest Learning Thermostats, Nest Protects, and Nest Cams as devices in the structure. This structure also contains information about the home as a whole (such as Away or ETA state, or active Rush Hours).  > **Key Point**: All devices share a common base set of information: a > user-supplied name, physical location in the home, software version, and > online status.  Every data element in the structure is addressable by a resource URL (called \"data locations\") in a shared JSON document. Each data location can store strings, numbers, booleans, parent/child objects, or arrays.  > Note: Use this root URL when making Nest API calls: ```https://developer-api.nest.com```   From the API, you can sync data from locations at multiple levels in the data model, for example:  * an entire structure, including all devices  * a single device in a structure  * a group of data values (current and ambient temperature)  * a single data value (battery health state) 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package gonest

import (
	"net/url"
	"strings"
	"encoding/json"
	"fmt"
)

type ThermostatApi struct {
	Configuration *Configuration
}

func NewThermostatApi() *ThermostatApi {
	configuration := NewConfiguration()
	return &ThermostatApi{
		Configuration: configuration,
	}
}

func NewThermostatApiWithBasePath(basePath string) *ThermostatApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &ThermostatApi{
		Configuration: configuration,
	}
}

/**
 * Get thermostat information
 * The Products endpoint returns information about the *Uber* products offered at a given location. The response includes the display name and other details about each product, and lists the products in the proper display order. 
 *
 * @param thermostatUid NEST Thermostat unique id.
 * @return *ThermostatStatus
 */
func (a ThermostatApi) DevicesThermostatsThermostatUidGet(thermostatUid string) (*ThermostatStatus, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/devices/thermostats/{thermostatUid}"
	localVarPath = strings.Replace(localVarPath, "{"+"thermostatUid"+"}", fmt.Sprintf("%v", thermostatUid), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(nestKey)' required
	// set key with prefix in header
	localVarHeaderParams["Authorization"] = a.Configuration.GetAPIKeyWithPrefix("Authorization")
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(ThermostatStatus)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "DevicesThermostatsThermostatUidGet", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

